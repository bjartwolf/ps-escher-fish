%! 

%%% A postscript about recursive fish.

%% The letter F

/draw-f {
  newpath
  0.30 0.20 moveto 
  0.40 0.20 lineto
  0.40 0.45 lineto
  0.60 0.45 lineto
  0.60 0.55 lineto
  0.40 0.55 lineto
  0.40 0.70 lineto
  0.70 0.70 lineto
  0.70 0.80 lineto
  0.30 0.80 lineto
  closepath
  0.01 setlinewidth
  stroke 
} def

/draw-george {
  newpath

  0.00 0.55 moveto
  0.15 0.45 lineto 
  0.30 0.55 lineto
  0.40 0.50 lineto 
  0.20 0.00 lineto 

  0.00 0.80 moveto 
  0.15 0.60 lineto
  0.30 0.65 lineto
  0.40 0.65 lineto
  0.35 0.80 lineto
  0.40 1.00 lineto

  0.60 1.00 moveto 
  0.65 0.80 lineto 
  0.60 0.65 lineto 
  0.80 0.65 lineto
  1.00 0.45 lineto

  1.00 0.20 moveto 
  0.60 0.50 lineto 
  0.80 0.00 lineto

  0.40 0.00 moveto 
  0.50 0.30 lineto 
  0.60 0.00 lineto

  0.01 setlinewidth
  stroke 
} def 

% [x y]
/vlength {
  aload pop      % x y
  dup mul        % x y*y
  exch           % y*y x
  dup mul        % y*y x*x
  add 
  sqrt 
} def 

% [x1 y1] [x2 y2]
/dotproduct {
  aload pop          % [x1 y1] x2 y2 
  3 -1 roll          % x2 y2 [x1 y1]
  aload pop          % x2 y2 x1 y1
  exch               % x2 y2 y1 x1 
  4 1 roll           % x1 x2 y2 y1
  mul                % x1 x2 y
  3 1 roll           % y x1 x2 
  mul                % y x 
  add                % dp
} def 

% Consumes: a procedure that draws lines for a picture.
% Produces: a picture-procedure that consumes a box and draws a picture.
/create-picture {    % bx
  [ exch             % [ d 
    { 
      gsave
      exch           % d bx 
      aload pop      % d a b c 
      3 -1 roll      % d b c a
      aload pop      % d b c xa ya

      (translate) == 
      2 copy == == 

      translate      % d b c 
      aload          % d b c xc yc c
      vlength        % d b c xc yc cl
      4 1 roll       % d cl b xc yc 
      exch atan      % d cl b ac 
      exch           % d cl ac b
      aload          % d cl ac xb yb b
      vlength        % d cl ac xb yb bl
      4 1 roll       % d cl bl ac xb yb
      exch atan      % d cl bl ac ab
      dup            % d cl bl ac ab ab 
      3 1 roll       % d cl bl ab ac ab
      sub            % d cl bl ab da
      dup abs div    % d cl bl ab x    | x = 1 or -1
      dup neg        % d cl bl ab x -x
      1 add 90 mul   % d cl bl ab x g  | g = 0 or 180
      3 -1 roll      % d cl bl x g ab
      add            % d cl bl x ang

      (rotate) ==
      dup == 

      rotate         % d cl bl x
      mul            % d cl bl'
      exch           % d bl' cl

      (scale) ==
      2 copy == ==

      scale          % d
      exec           % 
      grestore       
    } /exec cvx 
  ] cvx 
} def 

%% [x y] f -> [x' y'] where x' = x * f, y' = y * f 
/vscale {
  exch           % f [x y]
  aload pop      % f x y
  2 index        % f x y f 
  mul            % f x y', y' = y * f
  3 1 roll       % y' f x
  mul            % y' x', x' = f * x
  exch           % x' y'
  2 array        % x' y' [. .]
  astore         % [x' y']
} def

%% [x1 y1] [x2 y2] -> [x y], where x = x1 + x2 y1 + y2
/vadd {
  aload pop      % [x1 y1] x2 y2
  3 2 roll       % x2 y2 [x1 y1]
  aload pop      % x2 y2 x1 y1
  exch           % x2 y2 y1 x1
  4 -1 roll      % y2 y1 x1 x2
  add            % y2 y1 x', x' = x1 + x2 
  3 1 roll       % x' y2 y1
  add            % x' y', y' = y2 + y1
  2 array        % x' y' [. .]
  astore         % [x' y']
} def

%% [x1 y1] [x2 y2] -> [x y], where x = x1 - x2 y1 - y2
/vsub {
  aload pop      % [x1 y1] x2 y2 
  3 2 roll       % x2 y2 [x1 y1]
  aload pop      % x2 y2 x1 y1
  exch           % x2 y2 y1 x1
  4 -1 roll      % y2 y1 x1 x2 
  sub            % y2 y1 x', x' = x1 - x2
  3 1 roll       % x' y2 y1 
  exch           % x' y1 y2 
  sub            % x' y', y' = y1 - y2 
  2 array        % x' y' [. .]
  astore         % [x' y']
} def

%% [x y] -> [x' y'] where x' = -x, y' = -y
/vneg {
  aload pop      % x y
  neg            % x -y
  exch           % -y x
  neg            % -y -x
  exch           % -x -y 
  2 array        % -x -y [. .]
  astore         % [-x -y] 
} def

%% (a + b, c, -b)
%% [ [xa ya] [xb yb] [xc yc] ]
/turn-box { 
  aload pop      % [xa ya] [xb yb] [xc yc]
  exch           % [xa ya] [xc yc] [xb yb]
  dup            % [xa ya] [xc yc] [xb yb] [xb yb]
  4 -1 roll      % [xc yc] [xb yb] [xb yb] [xa ya]
  vadd           % [xc yc] [xb yb] [xa+xb ya+yb]
  3 1 roll       % [xa+xb ya+yb] [xc yc] [xb yb]
  vneg           % [xa+xb ya+yb] [xc yc] [-xb -yb]
  3 array        % [xa+xb ya+yb] [xc yc] [-xb -yb] [. . .]
  astore         % [ [xa+xb ya+yb] [xc yc] [-xb -yb] ]
} def

%% (a + b, -b, c)
%% [ [xa ya] [xb yb] [xc yc] ]
/flip-box {
  aload pop      % [xa ya] [xb yb] [xc yc]
  exch           % [xa ya] [xc yc] [xb yb]
  dup            % [xa ya] [xc yc] [xb yb] [xb yb]
  vneg           % [xa ya] [xc yc] [xb yb] [-xb -yb]
  3 1 roll       % [xa ya] [-xb -yb] [xc yc] [xb yb] 
  4 -1 roll      % [-xb -yb] [xc yc] [xb yb] [xa ya]
  vadd           % [-xb -yb] [xc yc] [xa+xb ya+yb]
  3 1 roll       % [xa+xb ya+yb] [-xb -yb] [xc yc]
  3 array        % [xa+xb ya+yb] [-xb -yb] [xc yc] [. . .]
  astore         % [ [xa+xb ya+yb] [-xb -yb] [xc yc] ]
} def

%% (a’, b’, c’) = (a + (b + c) / 2, (b + c) / 2, (c − b) / 2)
%% [ [xa ya] [xb yb] [xc yc] ]
/toss-box {
  aload pop      % [xa ya] [xb yb] [xc yc]
  2 copy         % [xa ya] [xb yb] [xc yc] [xb yb] [xc yc] 
  exch           % [xa ya] [xb yb] [xc yc] [xc yc] [xb yb]
  vsub           % [xa ya] [xb yb] [xc yc] [xc-xb yc-yb]
  0.5 vscale     % [xa ya] [xb yb] [xc yc] [(xc-xb)/2 (yc-yb)/2]
  4 1 roll       % [(xc-xb)/2 (yc-yb)/2] [xa ya] [xb yb] [xc yc]
  vadd           % [(xc-xb)/2 (yc-yb)/2] [xa ya] [xb+xc yb+yc]
  0.5 vscale     % [(xc-xb)/2 (yc-yb)/2] [xa ya] [(xb+xc)/2 (yb+yc)/2]
  dup            % [(xc-xb)/2 (yc-yb)/2] [xa ya] [(xb+xc)/2 (yb+yc)/2] [(xb+xc)/2 (yb+yc)/2]
  4 1 roll       % [(xb+xc)/2 (yb+yc)/2] [(xc-xb)/2 (yc-yb)/2] [xa ya] [(xb+xc)/2 (yb+yc)/2]
  vadd           % [(xb+xc)/2 (yb+yc)/2] [(xc-xb)/2 (yc-yb)/2] [xa+(xb+xc)/2 ya+(yb+yc)/2]
  3 1 roll       % [xa+(xb+xc)/2 ya+(yb+yc)/2] [(xb+xc)/2 (yb+yc)/2] [(xc-xb)/2 (yc-yb)/2]
  3 array        % [xa+(xb+xc)/2 ya+(yb+yc)/2] [(xb+xc)/2 (yb+yc)/2] [(xc-xb)/2 (yc-yb)/2] [. . .]
  astore         % [ [xa+(xb+xc)/2 ya+(yb+yc)/2] [(xb+xc)/2 (yb+yc)/2] [(xc-xb)/2 (yc-yb)/2] ]
} def

/move-vert {       % bx f 
  exch             % f bx
  aload pop        % f a b c 
  dup              % f a b c c
  5 -1 roll        % a b c c f
  vscale           % a b c c'
  4 -1 roll        % b c c' a
  vadd             % b c a'
  3 1 roll         % a' b c 
  3 array astore   % [ a' b c ]
} def


/move-hori {       % bx f
  exch             % f bx
  aload pop        % f a b c
  exch             % f a c b 
  dup              % f a c b b 
  5 -1 roll        % a c b b f
  vscale           % a c b b'
  4 -1 roll        % c b b' a 
  vadd             % c b a
  3 1 roll         % a c b 
  exch             % a b c 
  3 array astore   % [a' b c ]
} def

/scale-vert {      % bx f 
  exch             % f bx 
  aload pop        % f a b c
  4 -1 roll        % a b c f
  vscale           % a b c'
  3 array astore   % [ a b c' ]  
} def 

/scale-hori {       % bx f 
  exch             % f bx 
  aload pop        % f a b c 
  exch             % f a c b 
  4 -1 roll        % a c b f 
  vscale           % a c b'
  exch             % a b' c 
  3 array astore   % [ a b' c ]
} def

%% picture -> picture
/turn {
  [                % p [
    exch           % [ p
    /turn-box cvx  % [ p turn-box 
    exch           % [ turn-box p 
    /exec cvx      % [ turn-box p exec
  ] cvx            % { turn-box p exec }
} def

/flip {
  [              % p [
  exch           % [ p
  /exec          % [ p /exec 
  cvx            % [ p exec 
  /flip-box      % [ p exec /flip-box 
  cvx            % [ p exec flip-box
  3 1 roll       % [ flip-box p exec
  ]              % [ flip-box p exec ]
  cvx            % { flip-box p exec }
} def

/toss {
  [              % p [
  exch           % [ p
  /exec          % [ p /exec 
  cvx            % [ p exec 
  /toss-box      % [ p exec /toss-box 
  cvx            % [ p exec toss-box
  3 1 roll       % [ toss-box p exec
  ]              % [ toss-box p exec ]
  cvx            % { toss-box p exec }
} def

% Consumes: p1 p2 m n 
% Produces: p  
/above-ratio {
  [                % box * p1 p2 m n [
    5 1 roll       % box [ p1 p2 m n
    {
      1 index      % box p1 p2 m n m 
      add          % box p1 p2 m t
      div          % box p1 p2 f
      dup          % box p1 p2 f f 
      1            % box p1 p2 f f 1
      exch         % box p1 p2 f 1 f 
      sub          % box p1 p2 f f'
      dup          % box p1 p2 f f' f'
      3 1 roll     % box p1 p2 f' f f'
      6 -1 roll    % p1 p2 f' f f' box 
      dup          % p1 p2 f' f f' box box 
      7 1 roll     % box p1 p2 f' f f' box
      exch         % box p1 p2 f' f box f'  
      move-vert    % box p1 p2 f' f box'    (box' = box f' mv)
      exch         % box p1 p2 f' box' f 
      scale-vert   % box p1 p2 f' box1
      4 -1 roll    % box p2 f' box1 p1
      exec         % box p2 f'
      exch         % box f' p2 
      3 1 roll     % p2 box f'
      scale-vert   % p2 box2 
      exch         % box2 p2 
      exec         %
    } /exec cvx 
  ] cvx
} def

/above {
  1 1 above-ratio
} def 

% Consumes: p1 p2 m n 
% Produces: p  
/beside-ratio {
  [                % box * p1 p2 m n [
    5 1 roll       % box [ p1 p2 m n
    {
      1 index      % box p1 p2 m n m 
      add          % box p1 p2 m t
      div          % box p1 p2 f
      dup          % box p1 p2 f f 
      1            % box p1 p2 f f 1
      exch         % box p1 p2 f 1 f 
      sub          % box p1 p2 f f'
      exch         % box p1 p2 f' f
      dup          % box p1 p2 f' f f
      6 -1 roll    % p1 p2 f' f f box
      dup          % p1 p2 f' f f box box 
      3 2 roll     % p1 p2 f' f box box f 
      scale-hori   % p1 p2 f' f box box1 
      6 -1 roll    % p2 f' f box box1 p1 
      exec         % p2 f' f box 
      exch         % p2 f' box f
      move-hori    % p2 f' box'
      exch         % p2 box' f'
      scale-hori   % p2 box2 
      exch         % box2 p2 
      exec 
    } /exec cvx 
  ] cvx
} def

/beside {
  1 1 beside-ratio 
} def 

/quartet {
  [                % box * nw ne sw se [
    5 1 roll       % box [ nw ne sw se
    {              % box nw ne sw se 
      beside       % box nw ne s 
      4 1 roll     % s box nw ne 
      beside       % s box n 
      3 -1 roll    % box n s 
      above        % box p 
      exec 
    } /exec cvx 
  ] cvx   
} def

/some-box [ [20 500] [250 0] [0 250] ] def

/f-picture { draw-f } create-picture def

/george-picture { draw-george } create-picture def

% some-box /f-picture load toss exec  

% some-box /f-picture load dup turn 3 2 above-ratio exec

% some-box /f-picture load dup flip dup dup flip quartet exec 
