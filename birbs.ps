%!PS-Adobe-2.0 EPSF-2.0
%%Title: Escher birb tesselation
%%Creator: Einar W. HÃ¸st 
%%Pages: 1
%%EndComments
%%BeginProlog
%%EndProlog

%%Page: 1 1

%%% DRAWING PROCEDURES

/draw-point {   % x y 
  2 copy        % x y x y 
  exch          % x y y x 
  0.01 sub         % x y y x-1
  exch          % x y x-1 y 
  0.01 sub         % x y x-1 y-1
  4 2 roll      % x-1 y-1 x y 
  exch          % x-1 y-1 y x 
  0.01 add         % x-1 y-1 y x+1
  exch          % x-1 y-1 x+1 y
  0.01 add         % x-1 y-1 x+1 y+1
  4 copy        % x-1 y-1 x+1 y+1 x-1 y-1 x+1 y+1
  3 1 roll      % x-1 y-1 x+1 y+1 x-1 y+1 y-1 x+1
  exch          % x-1 y-1 x+1 y+1 x-1 y+1 x+1 y-1 
  moveto lineto 
  moveto lineto
} def 

/draw-birb {
  newpath

  0 0 0 setrgbcolor

   0.000  0.000 moveto 

   % South side
   
   0.134  0.093
   0.237  0.128
   0.396  0.137 curveto 

   0.420  0.013
   0.447 -0.069
   0.526 -0.168 curveto

   0.630 -0.092 
   0.681 -0.021
   0.679  0.132 curveto 

   0.821  0.121
   0.905  0.079
   1.000  0.000 curveto 

   % East side 

   1.072 0.224 
   1.015 0.374
   0.877 0.476 curveto 

   0.801 0.481
   0.699 0.385
   0.623 0.390 curveto

   0.485 0.492 
   0.428 0.642
   0.500 0.866 curveto

   % West side

   0.384 0.823
   0.306 0.772
   0.225 0.654 curveto 

   0.359 0.579
   0.395 0.500
   0.408 0.372 curveto
   
   0.283 0.353
   0.199 0.370
   0.079 0.411 curveto

   0.008 0.269
  -0.014 0.163
   0.000 0.000 curveto 

  closepath

  0.01 setlinewidth

  stroke

  1 0 0 setrgbcolor

  0.005 setlinewidth 

  % South side

   0.134  0.093 draw-point
   0.237  0.128 draw-point
   0.420  0.013 draw-point
   0.447 -0.069 draw-point
   0.630 -0.092 draw-point
   0.681 -0.021 draw-point
   0.821  0.121 draw-point
   0.905  0.079 draw-point

  %closepath
  stroke

} def

% tx = [ pos ang len ]
% pos = [ x y ]
% ang is angle (0, 60, 120, 180, 240, 300)
% len is length of side in triangle


% Consumes: tx
% Produces: txw txe txn txm
/create-toxes {         % tx
  (create-toxes) == 
  dup == 

  (prepare) == 

  aload pop             % pos ang len
  2 div                 % pos ang len' 
  3 array astore        % txw

  (west-tox) == 
  dup == 

  aload                 % pos ang len' txw
  4 1 roll              % txw pos ang len' 
  3 -1 roll             % txw ang len' pos
  aload pop             % txw ang len' x y
  3 -1 roll             % txw ang x y len'
  dup                   % txw ang x y len' len'
  4 1 roll              % txw ang len' x y len'
  dup                   % txw ang len' x y len' len'
  3 1 roll              % txw ang len' x len' y len'
  60 sin mul add        % txw ang len' x len' y'
  3 1 roll              % txw ang len' y' x len' 
  60 cos 1 add mul      % txw ang len' y' x dx
  add                   % txw ang len' y' x'
  exch                  % txw ang len' x' y'
  
  (stac3...) ==
  stack
  (...stac3) == 
  
  2 array astore        % txw ang len' pos'
  3 1 roll              % txw pos' ang len'
  3 array astore        % txw tx' 

  (tx') == 
  dup == 

  % east
  aload                 % txw pos' ang len' tx'
  4 1 roll              % txw tx' pos' ang len' 
  exch                  % txw tx' pos' len' ang 

  240 add 360 mod       % txw tx' pos' len' ange
  exch                  % txw tx' pos' ange len'
  3 array astore        % txw tx' txe

  (east-tox) == 
  dup == 

  exch                  % txw txe tx'

  % north
  aload                 % txw txe pos' ang len' tx'
  4 1 roll              % txw txe tx' pos' ang len' 
  exch                  % txw txe tx' pos' len' ang 
  120 add 360 mod       % txw txe tx' pos' len' angn
  exch                  % txw txe tx' pos' angn len'
  3 array astore        % txw txe tx' txn
  
  (north-tox) == 
  dup == 
  
  exch                  % txw txe txn tx'

  % middle
  aload pop             % txw txe txn pos' ang len'
  exch                  % txw txe txn pos' len' ang 
  180 add 360 mod       % txw txe txn pos' len' angn
  exch                  % txw txe txn pos' angn len'
  3 array astore        % txw txe txn txm

  (middle-tox) == 
  dup == 

} def 

%%% PICTURE PROCEDURES 

% Consumes: a procedure that draws lines for a picture.
% Produces: a picture-procedure that consumes a box and draws a picture.
/create-picture {    % tx * dp
  [ exch             % tx * [ dp 
    {                % tx dp
      gsave          % tx dp
      exch           % dp tx
      aload pop      % dp pos ang len
      3 -1 roll      % dp ang len pos 
      aload pop      % dp ang len x y 
      translate      % dp ang len 
      dup            % dp ang len len 
      scale          % dp ang 
      rotate         % dp
      exec           % 
      grestore       %
    } /exec cvx 
  ] cvx 
} def 

/quad-tri {          % tx * p 
  [ exch             % tx * [ p 
    {                % tx p 
      exch           % p tx 
      create-toxes   % p txw txe txn txm 
      4 index        % p txw txe txn txm p
      exec           % p txw txe txn 
      3 index        % p txw txe txn p 
      exec           % p txw txe 
      2 index        % p txw txe p 
      exec           % p txw
      exch           % txw p 
      exec
    } /exec cvx
  ] cvx 
} def

%%% PICTURES

/blank { pop } def 

/birb-picture { draw-birb } create-picture def 

/some-tox [ [100 100] 0 250 ] def

some-tox /birb-picture load quad-tri exec

% gswin64 -sDEVICE=pdfwrite -o limit-4.pdf 3-color-fish.ps

%%Trailer
%%Pages:      1
%%EOF
